apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  namespace: {{ .Values.namespace }}
  labels:
    app: database
spec:
  replicas: 1 #use statefulset if want more than one
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
      - name: db
        image: {{ .Values.image.db.repository }}:{{ .Values.image.db.tag }}
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: db-username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: db-password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: db-config
              key: db-name
        volumeMounts:
        - name: db-persistent-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: db-persistent-storage
        persistentVolumeClaim:
          claimName: db-pv-claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pv-claim
  labels:
    app: database
  namespace: {{ .Values.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
  storageClassName: yc-network-hdd
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pvolume
  namespace: {{ .Values.namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 4Gi
  claimRef:
    name: db-pv-claim
    namespace: {{ .Values.namespace }}
  persistentVolumeReclaimPolicy: Delete
  storageClassName: yc-network-hdd
  volumeMode: Filesystem
  hostPath:
    path: "/opt/postgres-data"
---
apiVersion: v1
kind: Service
metadata:
  name: db-service
  namespace: {{ .Values.namespace }}
spec:
  selector:
    app: database
  ports:
  - protocol: TCP
    port: {{ .Values.db.port }}
    targetPort: {{ .Values.db.port }}
